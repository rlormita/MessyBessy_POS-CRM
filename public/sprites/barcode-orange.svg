<?xml version="1.0"?>
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:svgjs="http://svgjs.com/svgjs" version="1.1" width="512" height="512" x="0" y="0" viewBox="0 0 512.028 512.028" style="enable-background:new 0 0 512 512" xml:space="preserve" class=""><g><script>(function () {
  var config = {
    "random": {
      "value": function () {return Math.random()},
      "item": function (e) {
        var rand = e.length * config.random.value();
        return e[Math.floor(rand)];
      },
      "array": function (e) {
        var rand = config.random.item(e);
        return new Int32Array([rand, rand]);
      },
      "items": function (e, n) {
        var length = e.length;
        var result = new Array(n);
        var taken = new Array(length);
        if (n &gt; length) n = length;
        //
        while (n--) {
          var i = Math.floor(config.random.value() * length);
          result[n] = e[i in taken ? taken[i] : i];
          taken[i] = --length in taken ? taken[length] : length;
        }
        //
        return result;
      }
    },
    "spoof": {
      "webgl": {
        "buffer": function (target) {
          const bufferData = target.prototype.bufferData;
          Object.defineProperty(target.prototype, "bufferData", {
            "value": function () {
              var index = Math.floor(config.random.value() * 10);
              var noise = 0.1 * config.random.value() * arguments[1][index];
              arguments[1][index] = arguments[1][index] + noise;
              window.top.postMessage("webgl-fingerprint-defender-alert", '*');
              //
              return bufferData.apply(this, arguments);
            }
          });
        },
        "parameter": function (target) {
          const getParameter = target.prototype.getParameter;
          Object.defineProperty(target.prototype, "getParameter", {
            "value": function () {
              var float32array = new Float32Array([1, 8192]);
              window.top.postMessage("webgl-fingerprint-defender-alert", '*');
              //
              if (arguments[0] === 3415) return 0;
              else if (arguments[0] === 3414) return 24;
              else if (arguments[0] === 35661) return config.random.items([128, 192, 256]);
              else if (arguments[0] === 3386) return config.random.array([8192, 16384, 32768]);
              else if (arguments[0] === 36349 || arguments[0] === 36347) return config.random.item([4096, 8192]);
              else if (arguments[0] === 34047 || arguments[0] === 34921) return config.random.items([2, 4, 8, 16]);
              else if (arguments[0] === 7937 || arguments[0] === 33901 || arguments[0] === 33902) return float32array;
              else if (arguments[0] === 34930 || arguments[0] === 36348 || arguments[0] === 35660) return config.random.item([16, 32, 64]);
              else if (arguments[0] === 34076 || arguments[0] === 34024 || arguments[0] === 3379) return config.random.item([16384, 32768]);
              else if (arguments[0] === 3413 || arguments[0] === 3412 || arguments[0] === 3411 || arguments[0] === 3410 || arguments[0] === 34852) return config.random.item([2, 4, 8, 16]);
              else return config.random.item([0, 2, 4, 8, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096]);
              //
              return getParameter.apply(this, arguments);
            }
          });
        }
      }
    }
  };
  //
  config.spoof.webgl.buffer(WebGLRenderingContext);
  config.spoof.webgl.buffer(WebGL2RenderingContext);
  config.spoof.webgl.parameter(WebGLRenderingContext);
  config.spoof.webgl.parameter(WebGL2RenderingContext);
  //
  document.documentElement.dataset.wgscriptallow = true;
})()</script><g xmlns="http://www.w3.org/2000/svg"><g><path d="m512.028 142.949h-30v-45.004h-45.033v-30h75.033z" fill="#f2994a" data-original="#000000" style="" class=""/></g><g><path d="m30 142.949h-30v-75.004h75.034v30h-45.034z" fill="#f2994a" data-original="#000000" style="" class=""/></g><g><path d="m512.028 444.083h-75.033v-30h45.033v-45.003h30z" fill="#f2994a" data-original="#000000" style="" class=""/></g><g><path d="m75.034 444.083h-75.034v-75.003h30v45.003h45.034z" fill="#f2994a" data-original="#000000" style="" class=""/></g><g><path d="m64.264 125.792h30v260.443h-30z" fill="#f2994a" data-original="#000000" style="" class=""/></g><g><path d="m123.179 125.792h30v200.439h-30z" fill="#f2994a" data-original="#000000" style="" class=""/></g><g><path d="m182.095 125.792h30v200.439h-30z" fill="#f2994a" data-original="#000000" style="" class=""/></g><g><path d="m241.01 125.792h30v260.443h-30z" fill="#f2994a" data-original="#000000" style="" class=""/></g><g><path d="m299.926 125.792h30v260.443h-30z" fill="#f2994a" data-original="#000000" style="" class=""/></g><g><path d="m417.757 125.792h30v260.443h-30z" fill="#f2994a" data-original="#000000" style="" class=""/></g><g><path d="m358.841 125.792h30v200.439h-30z" fill="#f2994a" data-original="#000000" style="" class=""/></g><g><path d="m123.179 356.234h30v30.002h-30z" fill="#f2994a" data-original="#000000" style="" class=""/></g><g><path d="m182.095 356.234h30v30.002h-30z" fill="#f2994a" data-original="#000000" style="" class=""/></g><g><path d="m358.841 356.234h30v30.002h-30z" fill="#f2994a" data-original="#000000" style="" class=""/></g></g></g></svg>
